#@ load("@ytt:data", "data")
#@ load("@ytt:yaml", "yaml")

#!
#! This file is your 'tap-values.yaml'
#!
---
#@ def config():
profile: full
ceip_policy_disclosed: true
buildservice:
  kp_default_repository: #@ "{}/{}".format(data.values.tap.registry.host, data.values.tap.registry.repositories.buildService)
  kp_default_repository_username: #@ data.values.tap.credentials.registry.username
  kp_default_repository_password: #@ data.values.tap.credentials.registry.password
  tanzunet_username: #@ data.values.tap.credentials.tanzuNet.username
  tanzunet_password: #@ data.values.tap.credentials.tanzuNet.password
  descriptor_name: "full"
  enable_automatic_dependency_updates: true

#! valid options are 'basic', 'testing', and 'testing_scanning'
supply_chain: testing_scanning
ootb_supply_chain_basic:
  registry:
    server: #@ data.values.tap.registry.host
    repository: #@ data.values.tap.registry.repositories.ootbSupplyChain
  gitops:
    ssh_secret: ""

ootb_supply_chain_testing:
  registry:
    server: #@ data.values.tap.registry.host
    repository: #@ data.values.tap.registry.repositories.ootbSupplyChain
  gitops:
    ssh_secret: ""

ootb_supply_chain_testing_scanning:
  registry:
    server: #@ data.values.tap.registry.host
    repository: #@ data.values.tap.registry.repositories.ootbSupplyChain
  gitops:
    ssh_secret: ""

learningcenter:
  ingressDomain: #@ data.values.tap.domains.learningCenter

tap_gui:
  service_type: ClusterIP
  ingressEnabled: "true"
  ingressDomain: #@ data.values.tap.domains.main
  app_config:

    #@ if "metadata_svc_account_token" in data.values.tap.credentials:
    #! Set security metadata access for TAP GUI.
    #! ref: https://docs.vmware.com/en/VMware-Tanzu-Application-Platform/1.2/tap/GUID-tap-gui-plugins-scc-tap-gui.html#enable-cve-scan-results-2
    proxy:
      /metadata-store:
        target: https://metadata-store-app.metadata-store:8443/api/v1
        changeOrigin: true
        secure: false
        headers:
          Authorization: #@ "Bearer {}".format(data.values.tap.credentials.metadata_svc_account_token)
          X-Custom-Source: project-star
    #@ end

    app:
      baseUrl: #@ "http://{}".format(data.values.tap.domains.tapGui)
    integrations:
      #@ if "github" in data.values.tap.credentials and "token" in data.values.tap.credentials.github:
      github:
      - host: github.com
        token: #@ data.values.tap.credentials.github.token
      #@ end
    catalog:
      locations:
      #@ for catalog in data.values.tap.catalogs:
      - type: url
        target: #@ catalog
      #@ end
    backend:
      baseUrl: #@ "http://{}".format(data.values.tap.domains.tapGui)
      cors:
        origin: #@ "http://{}".format(data.values.tap.domains.tapGui)
      #@ if "backstage" in data.values.tap.credentials and "database" in data.values.tap.credentials.backstage:
      backend:
        database:
          client: #@ data.values.tap.credentials.backstage.database.client
          connection:
            host: #@ data.values.tap.credentials.backstage.database.host
            port: #@ data.values.tap.credentials.backstage.database.port
            user: #@ data.values.tap.credentials.backstage.database.username
            password: #@ data.values.tap.credentials.backstage.database.password
            ssl: {rejectUnauthorized: true}
      #@ end
    #@ if "okta" in data.values.tap.credentials and "clientId" in data.values.tap.credentials.okta and "clientSecret" in data.values.tap.credentials.okta:
    auth:
      allowGuestAccess: true
      environment: development
      providers:
        okta:
          development:
            clientId:     #@ data.values.tap.credentials.okta.clientId
            clientSecret: #@ data.values.tap.credentials.okta.clientSecret
            audience:     #@ data.values.tap.credentials.okta.audience
    #@ end

metadata_store:
  ns_for_export_app_cert: "*"
  app_service_type: LoadBalancer


accelerator:
  ingress:
    include: true
  domain: #@ data.values.tap.domains.main
 
#!grype:
#!  namespace: #@ data.values.tap.devNamespaces[0]
#!  targetImagePullSecret: "tap-registry"

contour:
  envoy:
    service:
      type: LoadBalancer
      annotations:
        external-dns.alpha.kubernetes.io/hostname: #@ "*.{}".format(data.values.tap.domains.main)

cnrs:
  domain_name: #@ data.values.tap.domains.knative
  #! domain_template: "{{.Name}}.{{.Domain}}"
#@ end
---
apiVersion: v1
kind: Secret
metadata:
  name: tap-values
  namespace: #@ data.values.tap.namespace
type: Opaque
stringData:
  values.yml: #@ yaml.encode(config())
---
apiVersion: packaging.carvel.dev/v1alpha1
kind: PackageInstall
metadata:
  name: tap
  namespace: #@ data.values.tap.namespace
  annotations:
    kapp.k14s.io/change-group: tap
    kapp.k14s.io/change-rule: "upsert after upserting tap-install/rbac"
    kapp.k14s.io/change-rule.repo: "upsert after upserting tap-install/tap-repo"
spec:
  packageRef:
    refName: tap.tanzu.vmware.com
    versionSelection:
      constraints: #@ str(data.values.tap.version)
      prereleases: {}
  serviceAccountName: tap-default-sa
  values:
  - secretRef:
      name: tap-values